{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.91b11020.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from \"react\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n    const commentTextRef = useRef();\n\n    const { sendRequest, status, error } = useHttp(addComment);\n\n    // gets the onAddedComment from props for use in useEffect\n    const { onAddedComment } = props;\n\n    useEffect(() => {\n        if (status === \"completed\" && !error) {\n            onAddedComment();\n        }\n    }, [status, error, onAddedComment]);\n\n    const submitFormHandler = (event) => {\n        event.preventDefault();\n\n        const enteredText = commentTextRef.current.value;\n        // optional: Could validate here\n\n        // send comment to server\n        sendRequest({\n            commentData: { text: enteredText },\n            quoteId: props.quoteId,\n        });\n    };\n\n    return (\n        <form className={classes.form} onSubmit={submitFormHandler}>\n            {status === \"pending\" && (\n                <div className=\"centered\">\n                    <LoadingSpinner />\n                </div>\n            )}\n            <div className={classes.control} onSubmit={submitFormHandler}>\n                <label htmlFor=\"comment\">Your Comment</label>\n                <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n            </div>\n            <div className={classes.actions}>\n                <button className=\"btn\">Add Comment</button>\n            </div>\n        </form>\n    );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n    const [isAddingComment, setIsAddingComment] = useState(false);\n    const params = useParams();\n    const { quoteId } = params; // object destructuring to pull the quoteId out of the params obj\n    const {\n        sendRequest,\n        status,\n        data: loadedComments,\n    } = useHttp(getAllComments);\n\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [quoteId, sendRequest]);\n\n    const startAddCommentHandler = () => {\n        setIsAddingComment(true);\n    };\n\n    const addedCommentHandler = useCallback(() => {\n        sendRequest(quoteId);\n    }, [quoteId, sendRequest]);\n\n    let comments;\n\n    // checks pending status\n    if (status === \"pending\") {\n        comments = (\n            <div className=\"centered\">\n                <LoadingSpinner />\n            </div>\n        );\n    }\n\n    // loads a message if there are comments\n    if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n        comments = <CommentsList comments={loadedComments} />;\n    }\n\n    // loads a message if there are no comments\n    if (\n        status === \"completed\" &&\n        (!loadedComments || loadedComments.length === 0)\n    ) {\n        comments = <p>No comments were added yet!</p>;\n    }\n\n    return (\n        <section className={classes.comments}>\n            <h2>User Comments</h2>\n            {!isAddingComment && (\n                <button className=\"btn\" onClick={startAddCommentHandler}>\n                    Add a Comment\n                </button>\n            )}\n            {isAddingComment && (\n                <NewCommentForm\n                    quoteId={quoteId}\n                    onAddedComment={addedCommentHandler}\n                />\n            )}\n            {comments}\n        </section>\n    );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { useEffect } from \"react\";\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\n\nconst QuoteDetail = () => {\n    const match = useRouteMatch();\n    const params = useParams();\n    const { quoteId } = params; // object destructuring to pull the quoteId out of the params obj\n\n    const {\n        sendRequest,\n        status,\n        data: loadedQuote,\n        error,\n    } = useHttp(getSingleQuote, true);\n\n    useEffect(() => {\n        sendRequest(quoteId);\n    }, [sendRequest, quoteId]);\n\n    if (status === \"pending\") {\n        return (\n            <div className=\"centered\">\n                <LoadingSpinner />;\n            </div>\n        );\n    }\n\n    if (status === \"error\") {\n        return <p className=\"centered\">{error}</p>;\n    }\n\n    if (!loadedQuote.text) {\n        return <p>No quote found.</p>;\n    }\n\n    return (\n        <section>\n            <HighlightedQuote\n                text={loadedQuote.text}\n                author={loadedQuote.author}\n            />\n\n            <Route path={`${match.path}`} exact>\n                <div className=\"centered\">\n                    <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n                        Load Comments\n                    </Link>\n                </div>\n            </Route>\n\n            <Route path={`${match.path}/comments`}>\n                <Comments />\n            </Route>\n        </section>\n    );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}