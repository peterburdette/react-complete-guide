{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/AddNew.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","AddNew","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData","console","log"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBC2E/BC,EAvEG,SAACL,GACf,MAAoCM,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAEMC,EAAiBC,mBACjBC,EAAeD,mBAqBrB,OACI,eAAC,WAAD,WACI,cAAC,IAAD,CACIE,KAAML,EACNM,QAAS,SAACC,GAAD,MACL,4EAGR,cAAC,EAAD,UACI,uBACIC,QAlBW,WACvBP,GAAc,IAkBFP,UAAWC,IAAQc,KACnBC,SA/BhB,SAA2BC,GACvBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAIzCtB,EAAMwB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAoBxC,UAKKvB,EAAM2B,WACH,qBAAK1B,UAAWC,IAAQ0B,QAAxB,SACI,cAACC,EAAA,EAAD,MAIR,sBAAK5B,UAAWC,IAAQ4B,QAAxB,UACI,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKzB,OAExC,sBAAKR,UAAWC,IAAQ4B,QAAxB,UACI,uBAAOC,QAAQ,OAAf,kBACA,0BACIE,GAAG,OACHE,KAAK,IACLD,IAAKvB,OAGb,qBAAKV,UAAWC,IAAQkC,QAAxB,SACI,wBACIC,QAtCQ,WAC5B7B,GAAc,IAsCMP,UAAU,MAFd,kC,gBC/BTqC,UA3BA,WACX,MAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAEhBC,qBAAU,WACS,cAAXH,GACAC,EAAQG,KAAK,aAElB,CAACJ,EAAQC,IAQZ,OACI,oCACI,+CACA,cAAC,EAAD,CACIhB,UAAsB,YAAXe,EACXlB,WAXY,SAACuB,GACrBC,QAAQC,IAAIF,GAEZN,EAAYM","file":"static/js/6.d277af12.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState, Fragment } from \"react\";\nimport { Prompt } from \"react-router-dom\";\n\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n    const [isEntering, setIsEntering] = useState(false);\n\n    const authorInputRef = useRef();\n    const textInputRef = useRef();\n\n    function submitFormHandler(event) {\n        event.preventDefault();\n\n        const enteredAuthor = authorInputRef.current.value;\n        const enteredText = textInputRef.current.value;\n\n        // optional: Could validate here\n\n        props.onAddQuote({ author: enteredAuthor, text: enteredText });\n    }\n\n    const formFocusedHandler = () => {\n        setIsEntering(true);\n    };\n\n    const finishedEnteringHandler = () => {\n        setIsEntering(false);\n    };\n\n    return (\n        <Fragment>\n            <Prompt\n                when={isEntering}\n                message={(location) =>\n                    \"Are you sure you want to leave? All of your entered data will be lost.\"\n                }\n            />\n            <Card>\n                <form\n                    onFocus={formFocusedHandler}\n                    className={classes.form}\n                    onSubmit={submitFormHandler}\n                >\n                    {props.isLoading && (\n                        <div className={classes.loading}>\n                            <LoadingSpinner />\n                        </div>\n                    )}\n\n                    <div className={classes.control}>\n                        <label htmlFor=\"author\">Author</label>\n                        <input type=\"text\" id=\"author\" ref={authorInputRef} />\n                    </div>\n                    <div className={classes.control}>\n                        <label htmlFor=\"text\">Text</label>\n                        <textarea\n                            id=\"text\"\n                            rows=\"5\"\n                            ref={textInputRef}\n                        ></textarea>\n                    </div>\n                    <div className={classes.actions}>\n                        <button\n                            onClick={finishedEnteringHandler}\n                            className=\"btn\"\n                        >\n                            Add Quote\n                        </button>\n                    </div>\n                </form>\n            </Card>\n        </Fragment>\n    );\n};\n\nexport default QuoteForm;\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport QuoteForm from \"../components/quotes/QuoteForm\";\n\nimport useHttp from \"../hooks/use-http\";\nimport { addQuote } from \"../lib/api\";\n\nconst AddNew = () => {\n    const { sendRequest, status } = useHttp(addQuote);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (status === \"completed\") {\n            history.push(\"/quotes\");\n        }\n    }, [status, history]);\n\n    const addQuoteHandler = (quoteData) => {\n        console.log(quoteData);\n        // POSTs the quoteData using the function sendReqest from the use-http file\n        sendRequest(quoteData);\n    };\n\n    return (\n        <section>\n            <h1>Add New Quote</h1>\n            <QuoteForm\n                isLoading={status === \"pending\"}\n                onAddQuote={addQuoteHandler}\n            />\n        </section>\n    );\n};\n\nexport default AddNew;\n"],"sourceRoot":""}