{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","history","useHistory","location","useLocation","console","log","quotes","ascending","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","NoQuotesFound","noquotes","AllQuotes","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCkBdC,EAhBG,SAACC,GACf,OACI,qBAAIC,UAAWC,IAAQC,KAAvB,UACI,mCACI,qCACI,4BAAIH,EAAMI,SAEd,qCAAaJ,EAAMK,YAEvB,cAAC,IAAD,CAAMJ,UAAU,MAAMK,GAAE,kBAAaN,EAAMO,IAA3C,iC,iBCgDGC,EA5CG,SAACR,GACf,IAAMS,EAAUC,cACVC,EAAWC,cAEjBC,QAAQC,IAAIH,GAGZ,IAjBgBI,EAAQC,EAoBlBC,EAAiD,QAHnC,IAAIC,gBAAgBP,EAASQ,QAGVC,IAAI,QAGrCC,GAvBUN,EAuBgBf,EAAMe,OAvBdC,EAuBsBC,EAtBvCF,EAAOO,MAAK,SAACC,EAAQC,GACxB,OAAIR,EACOO,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,EAE7BgB,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,MA2B5C,OACI,eAAC,WAAD,WACI,qBAAKN,UAAWC,IAAQuB,QAAxB,SACI,yBAAQC,QAVS,WACzBjB,EAAQkB,KAAK,CACTC,SAAUjB,EAASiB,SACnBT,OAAO,SAAD,OAAWF,EAAqB,OAAS,UAO3C,kBACUA,EAAqB,aAAe,iBAIlD,oBAAIhB,UAAWC,IAAQ2B,KAAvB,SACKR,EAAaS,KAAI,SAACC,GAAD,OACd,cAAC,EAAD,CAEIxB,GAAIwB,EAAMxB,GACVF,OAAQ0B,EAAM1B,OACdD,KAAM2B,EAAM3B,MAHP2B,EAAMxB,a,yBCnCpByB,EAXO,WAClB,OACI,sBAAK/B,UAAWC,IAAQ+B,SAAxB,UACI,iDACA,cAAC,IAAD,CAAMhC,UAAU,MAAMK,GAAG,WAAzB,6B,gBCwCG4B,UAvCG,WACd,MAKIC,YAAQC,KAAc,GAJtBC,EADJ,EACIA,YACAC,EAFJ,EAEIA,OACMC,EAHV,EAGIC,KACAC,EAJJ,EAIIA,MAOJ,OAJAC,qBAAU,WACNL,MACD,CAACA,IAEW,YAAXC,EAEI,sBAAKrC,UAAU,WAAf,UACI,cAAC0C,EAAA,EAAD,IADJ,OAMO,UAAXL,EACO,mBAAGrC,UAAU,mBAAb,SAAiCwC,IAI7B,cAAXH,GACEC,GAAwC,IAAxBA,EAAaK,OAM/B,oCACI,4CACA,cAAC,EAAD,CAAW7B,OAAQwB,OANhB,cAAC,EAAD","file":"static/js/5.db4c542c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","import classes from \"./QuoteItem.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst QuoteItem = (props) => {\n    return (\n        <li className={classes.item}>\n            <figure>\n                <blockquote>\n                    <p>{props.text}</p>\n                </blockquote>\n                <figcaption>{props.author}</figcaption>\n            </figure>\n            <Link className=\"btn\" to={`/quotes/${props.id}`}>\n                View Fullscreen\n            </Link>\n        </li>\n    );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n    return quotes.sort((quoteA, quoteB) => {\n        if (ascending) {\n            return quoteA.id > quoteB.id ? 1 : -1;\n        } else {\n            return quoteA.id < quoteB.id ? 1 : -1;\n        }\n    });\n};\n\nconst QuoteList = (props) => {\n    const history = useHistory();\n    const location = useLocation();\n\n    console.log(location);\n\n    // default JavaScript constructor function - gets the value of the 'search' property within the 'location' object\n    const queryParams = new URLSearchParams(location.search);\n\n    // this will get the 'sort' value of the query parameters and check to see if it is 'asc'\n    const isSortingAscending = queryParams.get(\"sort\") === \"asc\";\n\n    // sorts quotes\n    const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n    const changeSortingHandler = () => {\n        history.push({\n            pathname: location.pathname,\n            search: `?sort=${isSortingAscending ? \"desc\" : \"asc\"}`,\n        });\n    };\n\n    return (\n        <Fragment>\n            <div className={classes.sorting}>\n                <button onClick={changeSortingHandler}>\n                    Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}\n                </button>\n            </div>\n\n            <ul className={classes.list}>\n                {sortedQuotes.map((quote) => (\n                    <QuoteItem\n                        key={quote.id}\n                        id={quote.id}\n                        author={quote.author}\n                        text={quote.text}\n                    />\n                ))}\n            </ul>\n        </Fragment>\n    );\n};\n\nexport default QuoteList;\n","import { Link } from \"react-router-dom\";\nimport classes from \"./NoQuotesFound.module.css\";\n\nconst NoQuotesFound = () => {\n    return (\n        <div className={classes.noquotes}>\n            <p>No quotes found!</p>\n            <Link className=\"btn\" to=\"/add-new\">\n                Add a Quote\n            </Link>\n        </div>\n    );\n};\n\nexport default NoQuotesFound;\n","import React, { useEffect } from \"react\";\n\nimport QuoteList from \"../components/quotes/QuoteList\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\nimport useHttp from \"../hooks/use-http\";\nimport { getAllQuotes } from \"../lib/api\";\n\nconst AllQuotes = () => {\n    const {\n        sendRequest,\n        status,\n        data: loadedQuotes,\n        error,\n    } = useHttp(getAllQuotes, true);\n\n    useEffect(() => {\n        sendRequest();\n    }, [sendRequest]);\n\n    if (status === \"pending\") {\n        return (\n            <div className=\"centered\">\n                <LoadingSpinner />;\n            </div>\n        );\n    }\n\n    if (status === \"error\") {\n        return <p className=\"centered focused\">{error}</p>;\n    }\n\n    if (\n        status === \"completed\" &&\n        (!loadedQuotes || loadedQuotes.length === 0)\n    ) {\n        return <NoQuotesFound />;\n    }\n\n    return (\n        <section>\n            <h1>All Quotes</h1>\n            <QuoteList quotes={loadedQuotes} />\n        </section>\n    );\n};\n\nexport default AllQuotes;\n"],"sourceRoot":""}